{"version":3,"sources":["components/Templates.jsx","components/Meme.jsx","App.jsx","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","data","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAiBeA,EAjBG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAC3B,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAUG,KAAI,SAACC,GAAD,OACf,qBACAF,UAAU,WACVG,QAAS,WACLJ,EAAQG,IAHZ,SAKF,qBAAKE,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MAA2BN,UAAU,WALrDE,EAASK,U,cCwChBC,EA3CF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMV,EAAa,EAAbA,QACjB,EAAwBW,mBAAS,CAC7BC,YAAaF,EAAKF,GAClBK,SAAU,aACVC,SAAU,WACVC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAmBA,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BACK,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC5B,uBAAmBC,KAAK,OAAOC,YAAW,uBAAkBF,EAAM,GAClEG,SAAU,SAACC,GACP,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAACM,KAAMF,EAAEG,OAAOC,OAClCd,EAAQ,2BAAID,GAAL,IAAWD,MAAOa,OAJjBL,QAQpB,gCACI,wBAAQnB,QA1BA,WAChB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GACjBhB,GAAG,iBAAagB,EAAb,mBAA6BS,EAAIH,SAExCI,MAAM1B,GACL2B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHrC,EAAQ,2BAAIU,GAAL,IAAWH,IAAK8B,EAAKA,KAAK9B,WAkB7B,2BACA,wBAAQH,QAAS,WACbJ,EAAQ,OADZ,gCCVDsC,MArBf,WACE,MAAkC3B,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBwC,EAAlB,KACA,EAAwB5B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KASA,OARAwC,qBAAU,WACRP,MAAM,qCACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLE,EAAaF,EAAKA,KAAKI,YAGzB,IAEA,sBAAKxC,UAAU,MAAf,UACE,gDACU,OAATS,EAAkB,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IAC1D,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCfnC0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c5c1780d.chunk.js","sourcesContent":["const Templates = ({templates, setMeme}) => {\r\n    return (\r\n        <div className=\"templates\">\r\n            {templates.map((template)=>(\r\n            <div key={template.id} \r\n            className=\"template\"\r\n            onClick={() => {\r\n                setMeme(template);\r\n            }}>\r\n          <div style={{backgroundImage: `url(${template.url})`}} className=\"image\">\r\n          </div>\r\n          </div>\r\n          ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Templates;","import {useState} from \"react\";\r\nconst Meme = ({meme, setMeme}) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"anushka_16\",\r\n        password: \"@nu$hK@@\",\r\n        boxes: [],\r\n\r\n    });\r\n    const generateMeme= () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            url +=`&boxes[${index}][text]=${box.text}`;\r\n        });\r\n        fetch(url)\r\n        .then((res) => res.json())\r\n        .then((data)=>{\r\n            setMeme({...meme, url: data.data.url})\r\n\r\n        });\r\n    };\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\" />\r\n            <div>\r\n                {[...Array(meme.box_count)].map((_, index) => (\r\n                    <input key={index} type=\"text\" placeholder={`Meme Caption ${index+1}`}\r\n                    onChange={(e)=>{\r\n                        const newBoxes = form.boxes;\r\n                        newBoxes[index] = {text: e.target.value}; \r\n                        setForm({...form, boxes: newBoxes});\r\n                    }} />\r\n                ))}\r\n            </div>\r\n            <div>\r\n                <button onClick={generateMeme}>Generate Meme</button>\r\n                <button onClick={() => {\r\n                    setMeme(null);\r\n                }}>Choose Meme</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Meme;","import { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Template from \"./components/Templates\";\r\nimport Meme from './components/Meme';\r\n\r\nfunction App() {\r\n  const [templates, setTemplates] = useState([]);\r\n  const [meme, setMeme] = useState(null);\r\n  useEffect(()=>{\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      setTemplates(data.data.memes);\r\n      // console.log(data.data.memes)\r\n    });\r\n  },[]);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Meme Generator</h1>\r\n      {meme === null ? ( <Template templates={templates} setMeme={setMeme} /> ) : \r\n      ( <Meme meme={meme} setMeme={setMeme} /> ) }\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}